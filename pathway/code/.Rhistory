return(sum_table)
}
is_filter_by_p=FALSE
is_filter_by_p_adj=TRUE
is_filter_by_top=FALSE
p_cutoff = 0.01
p_adj_cutoff = 0.05
top_n = 100
is_sum_by_n=FALSE
is_sum_by_p=FALSE
is_sum_by_padj=FALSE
is_norm_by_trait=FALSE
is_norm_by_cluster=FALSE
is_norm_by_jaccard=FALSE
## Filter pathways
filter_data <- function(data,
is_filter_by_p = FALSE,
is_filter_by_p_adj = FALSE,
is_filter_by_top = FALSE,
p_cutoff = 0.01,
p_adj_cutoff = 0.05,
top_n = 100) {
if (is_filter_by_p) {
data <- data %>%
group_by(trait) %>%
filter(p_value < p_cutoff)
} else if (is_filter_by_p_adj) {
data <- data %>%
group_by(trait) %>%
mutate(p_adj = p.adjust(p_value, method = "fdr")) %>%
filter(p_adj < p_adj_cutoff)
} else if (is_filter_by_top) {
data <- data %>%
group_by(trait) %>%
arrange(p_value) %>%
slice_head(n = top_n)
}
return(data)
}
filtered_data = filter_data(merged_data,
is_filter_by_p,
is_filter_by_p_adj,
is_filter_by_top,
p_cutoff,
p_adj_cutoff,
top_n)
## Summarize
sum_data=function(data,
is_sum_by_n=FALSE,
is_sum_by_p=FALSE,
is_sum_by_padj=FALSE){
if (is_sum_by_n){
sum_table = data %>%
distinct(trait, cluster, go) %>%
group_by(trait, cluster) %>%
summarise(sum_val = n())
} else if (is_sum_by_p){
sum_table = data %>%
group_by(trait, cluster) %>%
summarise(sum_val = sum(-log10(p_value)))
} else if (is_sum_by_padj){
sum_table = data %>%
group_by(trait, cluster) %>%
summarise(sum_val = sum(-log10(p_adj)))
}
return(sum_table)
}
sum_table=sum_data(filtered_data,
is_sum_by_n,
is_sum_by_p,
is_sum_by_padj)
#### Normalization
norm_data=function(merged_data,sum_table,
is_norm_by_trait=FALSE,
is_norm_by_cluster=FALSE,
is_norm_by_jaccard=FALSE){
if (is_norm_by_trait){# how many percentage of pathways in each trait belong to a cluster
norm_table <- sum_table %>%
group_by(trait) %>%
mutate(percentage = sum_val / sum(sum_val) * 100) %>%
ungroup()
} else if (is_norm_by_cluster){# how many percentage of pathways in each cluster belong to a trait
norm_table <- sum_table %>%
group_by(cluster) %>%
mutate(percentage = sum_val / sum(sum_val) * 100) %>%
ungroup()
} else if (is_norm_by_jaccard){
trait_cluster_counts <- merged_data %>%
distinct(trait, cluster, go) %>%
group_by(trait, cluster) %>%
summarise(
count_trait_cluster = n(),
.groups = 'drop'
)
trait_counts <- merged_data %>%
distinct(trait, go) %>%  # Ensure unique pathways per trait
group_by(trait) %>%
summarise(
count_trait = n(),
.groups = 'drop'
)
cluster_counts <- merged_data %>%
distinct(cluster, go) %>%  # Ensure unique pathways per cluster
group_by(cluster) %>%
summarise(
count_cluster = n(),
.groups = 'drop'
)
merged_data <- trait_cluster_counts %>%
left_join(trait_counts, by = "trait") %>%
left_join(cluster_counts, by = "cluster")
norm_table <- merged_data %>%
mutate(
percentage = count_trait_cluster / (count_trait + count_cluster - count_trait_cluster)
)
norm_table=norm_table[,c('trait','cluster','percentage')]
}
return(norm_table)
}
norm_table=norm_data(merged_data, sum_table,
is_norm_by_trait=TRUE,
is_norm_by_cluster,
is_norm_by_jaccard)
norm_table
cluster_labels
norm_table
# ---- Plot sankey ----
table=merge(norm_table, cluster_labels, by = "cluster")
table
# prepare data for Sankey diagram
nodes <- data.frame(name = unique(c(table$trait, table$cluster_label)))
nodes$id <- seq_along(nodes$name) - 1
links <- table %>%
mutate(source = match(trait, nodes$name) - 1,
target = match(cluster_label, nodes$name) - 1) %>%
select(source, target, percentage)
# plot
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "percentage", NodeID = "name",
sinksRight=FALSE, fontSize = 20,iterations = 0)
p
# set parameters
filter_by='p'# p or padj or n
cutoff=0.01
sum_by='p'# p or padj or n
norm_by='jaccard'# trait or cluster or jaccard
map <- list(
filter_by = list(p = c(TRUE, FALSE, FALSE), padj = c(FALSE, TRUE, FALSE), n = c(FALSE, FALSE, TRUE)),
sum_by = list(p = c(TRUE, FALSE, FALSE), padj = c(FALSE, TRUE, FALSE), n = c(FALSE, FALSE, TRUE)),
norm_by = list(trait = c(TRUE, FALSE, FALSE), cluster = c(FALSE, TRUE, FALSE), jaccard = c(FALSE, FALSE, TRUE))
)
# Assign logical values using the map
c(is_filter_by_p, is_filter_by_p_adj, is_filter_by_top) <- map$filter_by[[filter_by]]
# Assign logical values using the map
is_filter_by_p, is_filter_by_p_adj, is_filter_by_top <- map$filter_by[[filter_by]]
map$filter_by[[filter_by]]
# Assign logical values using the map
c(is_filter_by_p, is_filter_by_p_adj, is_filter_by_top) %<-% map$filter_by[[filter_by]]
library(zeallot)
install.packages('zeallot')
library(zeallot)
# Assign logical values using the map
c(is_filter_by_p, is_filter_by_p_adj, is_filter_by_top) %<-% map$filter_by[[filter_by]]
c(is_sum_by_p, is_sum_by_padj, is_sum_by_n) %<-% map$sum_by[[sum_by]]
c(is_norm_by_trait, is_norm_by_cluster, is_norm_by_jaccard) %<-% map$norm_by[[norm_by]]
plot_save_name=paste0('sankey_filter.',filter_by,'.',cutoff,'_','sum.',sum_by,'_norm.',norm_by)
plot_save_name
cmd=paste("Rscript run_rrvgo_all.R",'p',0.01,'p','trait')
system(cmd)
cmd=paste("Rscript run_rrvgo_all.R",'p',0.01,'p','trait')
system(cmd)
cmd=paste("Rscript run_rrvgo_all.R",'p',0.01,'p','trait')
system(cmd)
source("~/Desktop/amp_pd/rnaseq/pathway/code/run_rrvgo_all.R")
head(merged_data)
filtered_data = filter_data(merged_data, is_filter_by_p, is_filter_by_p_adj, is_filter_by_top, cutoff)
head(filtered_data)
head(sum_table)
head(norm_table)
filtered_data = filter_data(merged_data, is_filter_by_p, is_filter_by_p_adj, is_filter_by_top, cutoff)
sum_table=sum_data(filtered_data,is_sum_by_n,is_sum_by_p,is_sum_by_padj)
norm_table=norm_data(merged_data, sum_table,is_norm_by_trait,is_norm_by_cluster,is_norm_by_jaccard)
table=merge(norm_table, cluster_labels, by = "cluster")
table
plot_sankey(table)
save_path
plot_save_name
# ---- Function: Plot sankey ----
plot_sankey=function(table,save_path,plot_save_name){
# prepare data for Sankey diagram
nodes <- data.frame(name = unique(c(table$trait, table$cluster_label)))
nodes$id <- seq_along(nodes$name) - 1
links <- table %>%
mutate(source = match(trait, nodes$name) - 1,
target = match(cluster_label, nodes$name) - 1) %>%
select(source, target, percentage)
# plot
p <- sankeyNetwork(Links = links, Nodes = nodes,
Source = "source", Target = "target",
Value = "percentage", NodeID = "name",
sinksRight=FALSE, fontSize = 20,iterations = 0)
saveWidget(p, file=paste0(save_path,plot_save_name,".html"))
}
plot_sankey(table,save_path,plot_save_name)
source("~/Desktop/amp_pd/rnaseq/pathway/code/run_rrvgo_all.R")
head(merged_data)
filter_by
cutoff
sum_by
norm_by
is_filter_by_p
is_filter_by_p_adj
is_filter_by_top
filter_sum_norm_plot=function(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels){
c(is_filter_by_p, is_filter_by_p_adj, is_filter_by_top) %<-% map$filter_by[[filter_by]]
c(is_sum_by_p, is_sum_by_padj, is_sum_by_n) %<-% map$sum_by[[sum_by]]
c(is_norm_by_trait, is_norm_by_cluster, is_norm_by_jaccard) %<-% map$norm_by[[norm_by]]
filtered_data = filter_data(merged_data, is_filter_by_p, is_filter_by_p_adj, is_filter_by_top, cutoff)
sum_table=sum_data(filtered_data,is_sum_by_n,is_sum_by_p,is_sum_by_padj)
norm_table=norm_data(merged_data, sum_table,is_norm_by_trait,is_norm_by_cluster,is_norm_by_jaccard)
table=merge(norm_table, cluster_labels, by = "cluster")
plot_sankey(table,save_path,plot_save_name)
}
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by)
filtered_data = filter_data(merged_data, is_filter_by_p, is_filter_by_p_adj, is_filter_by_top, cutoff)
sum_table=sum_data(filtered_data,is_sum_by_n,is_sum_by_p,is_sum_by_padj)
norm_table=norm_data(merged_data, sum_table,is_norm_by_trait,is_norm_by_cluster,is_norm_by_jaccard)
table=merge(norm_table, cluster_labels, by = "cluster")
plot_sankey(table,save_path,plot_save_name)
filter_sum_norm_plot=function(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels){
# c(is_filter_by_p, is_filter_by_p_adj, is_filter_by_top) %<-% map$filter_by[[filter_by]]
# c(is_sum_by_p, is_sum_by_padj, is_sum_by_n) %<-% map$sum_by[[sum_by]]
# c(is_norm_by_trait, is_norm_by_cluster, is_norm_by_jaccard) %<-% map$norm_by[[norm_by]]
filter_vals <- map$filter_by[[filter_by]]
is_filter_by_p <- filter_vals[1]
is_filter_by_p_adj <- filter_vals[2]
is_filter_by_top <- filter_vals[3]
sum_vals <- map$sum_by[[sum_by]]
is_sum_by_p <- sum_vals[1]
is_sum_by_padj <- sum_vals[2]
is_sum_by_n <- sum_vals[3]
norm_vals <- map$norm_by[[norm_by]]
is_norm_by_trait <- norm_vals[1]
is_norm_by_cluster <- norm_vals[2]
is_norm_by_jaccard <- norm_vals[3]
filtered_data = filter_data(merged_data, is_filter_by_p, is_filter_by_p_adj, is_filter_by_top, cutoff)
sum_table=sum_data(filtered_data,is_sum_by_n,is_sum_by_p,is_sum_by_padj)
norm_table=norm_data(merged_data, sum_table,is_norm_by_trait,is_norm_by_cluster,is_norm_by_jaccard)
table=merge(norm_table, cluster_labels, by = "cluster")
plot_sankey(table,save_path,plot_save_name)
}
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by)
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels)
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name)
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels)
for (filter_by in filter_by_list){
for (sum_by in sum_by_list){
for (norm_by in norm_by_list){
if (filter_by=='p'){
for (cutoff in p_cutoff_list){
plot_save_name=paste0('sankey_c',k,'_filter.',filter_by,'.',cutoff,'_','sum.',sum_by,'_norm.',norm_by)
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels)
}
} else if (filter_by=='padj'){
for (cutoff in padj_cutoff_list){
plot_save_name=paste0('sankey_c',k,'_filter.',filter_by,'.',cutoff,'_','sum.',sum_by,'_norm.',norm_by)
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels)
}
} else if (filter_by=='n'){
for (cutoff in n_cutoff_list){
plot_save_name=paste0('sankey_c',k,'_filter.',filter_by,'.',cutoff,'_','sum.',sum_by,'_norm.',norm_by)
filter_sum_norm_plot(merged_data,filter_by,cutoff,sum_by,norm_by,save_path, plot_save_name, map=map,cluster_labels=cluster_labels)
}
}
}
}
}
source("~/Desktop/amp_pd/rnaseq/pathway/code/run_rrvgo_all.R")
source("~/Desktop/amp_pd/rnaseq/pathway/code/run_rrvgo_all.R")
source("~/Desktop/amp_pd/rnaseq/pathway/code/run_rrvgo_all.R")
install.packages('ActivePathways')
library(ActivePathways)
source("~/Desktop/amp_pd/rnaseq/pathway/code/run_rrvgo_all.R")
library(ActivePathways)
fname_scores <- system.file("extdata", "Adenocarcinoma_scores_subset.tsv",
package = "ActivePathways")
fname_GMT <- system.file("extdata", "hsapiens_REAC_subset.gmt",
package = "ActivePathways")
fname_scores
scores <- read.table(fname_scores, header = TRUE, row.names = 'Gene')
scores <- as.matrix(scores)
scores[is.na(scores)] <- 1
head(scores)
fname_GMT
enriched_pathways <- ActivePathways(scores, fname_GMT)
head(enriched_pathways)
enriched_pathways[1:3,]
enriched_pathways[["overlap"]][[1]]
setwd('/Users/manage/Desktop/Github/PD/pathway/code/')
# ---- Set Path ----
# gene module path
gpsnet_result_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/GPSnet/DEGs_hs_vs_normal.psudobulk.default/matlab/DEGs_hs_vs_normal.psudobulk.default_norm/GPSnet_result_final/'
# save path
parent_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/pathway/'
# save version and suffix
version='DEGs_hs_vs_normal.psudobulk.default'
suffix='all_itself'
# traits (name of gene module result files)
trait_list='B_cells_filtered,Dendritic_cells_filtered,Fibroblasts_filtered,Keratinocytes_filtered,Plasma_cells_filtered,Proliferating_cells_filtered,Sweat_gland_Myoepithelial_cells_filtered,T_cells_filtered'
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',suffix,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
## Combine output files into one file
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
if (!dir.exists(combined_save_path)) {
dir.create(combined_save_path, recursive = TRUE)
}
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list)
system(cmd)
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',suffix,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
trait_list='Dendritic_cells_filtered'
# ---- Run pathway enrichment on 3 databases: GO, REAC, KEGG ----
# GO
save_path=paste0(parent_save_path,version,'/GO/')
cmd <- paste("Rscript gprofier_goxplore_revigo_filterGO.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
# REAC
save_path=paste0(parent_save_path,version,'/REAC/')
cmd <- paste("Rscript gprofier_filterREAC.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
# KEGG
save_path=paste0(parent_save_path,version,'/KEGG/')
cmd <- paste("Rscript gprofier_filterKEGG.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
# traits (name of gene module result files)
trait_list='B_cells_filtered,Dendritic_cells_filtered,Fibroblasts_filtered,Keratinocytes_filtered,Plasma_cells_filtered,Proliferating_cells_filtered,Sweat_gland_Myoepithelial_cells_filtered,T_cells_filtered'
## Combine output files into one file
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list)
system(cmd)
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',suffix,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
trait_list='Sweat_gland_Myoepithelial_cells_filtered'
# ---- Run pathway enrichment on 3 databases: GO, REAC, KEGG ----
# GO
save_path=paste0(parent_save_path,version,'/GO/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_goxplore_revigo_filterGO.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
# REAC
save_path=paste0(parent_save_path,version,'/REAC/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_filterREAC.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
# KEGG
save_path=paste0(parent_save_path,version,'/KEGG/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_filterKEGG.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
# traits (name of gene module result files)
trait_list='B_cells_filtered,Dendritic_cells_filtered,Fibroblasts_filtered,Keratinocytes_filtered,Plasma_cells_filtered,Proliferating_cells_filtered,Sweat_gland_Myoepithelial_cells_filtered,T_cells_filtered'
## Combine output files into one file
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
if (!dir.exists(combined_save_path)) {
dir.create(combined_save_path, recursive = TRUE)
}
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list)
system(cmd)
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',suffix,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
?write.csv
system(cmd)
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',suffix,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
gpsnet_result_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/GPSnet/DEGs_lesion_vs_normal.psudobulk.default/matlab/DEGs_lesion_vs_normal.psudobulk.default_norm/GPSnet_result_final/'
# save path
parent_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/pathway/'
# save version and suffix
version='DEGs_lesion_vs_normal.psudobulk.default'
suffix='all_itself'
# traits (name of gene module result files)
trait_list='B_cells_filtered,Dendritic_cells_filtered,Fibroblasts_filtered,Keratinocytes_filtered,Plasma_cells_filtered,Proliferating_cells_filtered,Sweat_gland_Myoepithelial_cells_filtered,T_cells_filtered'
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',suffix,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',suffix,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list)
system(cmd)
row_hclust
plot(row_hclust)
'go' in 'go,reac'
'go' %in% 'go,reac'
'go' %in% c('go','reac')
getwd()
#---- Combine output files into one file ----
combine_database='go,reac'
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
if (!dir.exists(combined_save_path)) {
dir.create(combined_save_path, recursive = TRUE)
}
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list,combine_database)
system(cmd)
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50)
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50)
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50,15,10)
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50,15,15)#h,w
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50,12,10)#h,w
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50,12,12)#h,w
system(cmd)
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,100,20,12)#h,w
system(cmd)
# ---- Plot Bubble Plot ----
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T100/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,100,20,12)#h,w
system(cmd)
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T50/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,50,12,12)#h,w
system(cmd)
# ---- Set Path ----
# gene module path
gpsnet_result_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/GPSnet/DEGs_hs_vs_normal.psudobulk.default/matlab/DEGs_hs_vs_normal.psudobulk.default_norm/GPSnet_result_final/'
# save path
parent_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/pathway/'
# save version and suffix
version='DEGs_hs_vs_normal.psudobulk.default'
# traits (name of gene module result files)
trait_list='B_cells_filtered,Dendritic_cells_filtered,Fibroblasts_filtered,Keratinocytes_filtered,Plasma_cells_filtered,Proliferating_cells_filtered,Sweat_gland_Myoepithelial_cells_filtered,T_cells_filtered'
#---- Combine output files into one file ----
combine_database='go,reac'
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
if (!dir.exists(combined_save_path)) {
dir.create(combined_save_path, recursive = TRUE)
}
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list,combine_database)
system(cmd)
# ---- Plot Bubble Plot ----
top_num=50
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T',top_num,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,top_num,12,12)#h,w
system(cmd)
# ---- Plot Bubble Plot ----
top_num=100
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T',top_num,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,top_num,20,12)#h,w
system(cmd)
