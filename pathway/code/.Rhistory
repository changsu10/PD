node_score <- node_score %>%
left_join(map_ref %>% select(ncbi_id, symbol), by = 'ncbi_id')
# Append logFC and p_vals
degs <- read_csv(paste0(gpsnet_raw_input_path, t, '.csv'))# !! Check if raw filenames !!
node_score <- node_score %>%
left_join(degs %>% select({{log2FC_var}}, {{gene_var}}, {{pval_var}}, {{padj_var}}) %>%
rename(symbol = {{gene_var}}), by = 'symbol')
# Drop rows with NA values
node_score <- drop_na(node_score)
# Remove self-loop nodes
filtered_df <- df %>% filter(from != to)
common_nodes = intersect(unique(node_score$ncbi_id),unique(c(filtered_df$from,filtered_df$to)))
node_score = node_score %>% filter(ncbi_id %in% common_nodes)
filtered_df <- filtered_df %>% filter(from %in% common_nodes & to %in% common_nodes)
common_nodes <- unique(c(filtered_df$from, filtered_df$to))
# Filter node_score again to ensure it matches the nodes in filtered_df
node_score <- node_score %>% filter(ncbi_id %in% common_nodes)
if (is_label_pathway){
# for each node, find if it belongs to highlight pathways
pathways=highlight_pathways %>% filter(cell_type==t)
pathway_gene_map <- list()
for (pathway_id in pathways$term_id){
# Map the pathway ID to its associated genes
gconvert_res <- gconvert(query = pathway_id, organism = "hsapiens", target = "ENTREZGENE_ACC")
pathway_ncbi_ids <- gconvert_res %>%
select(target) %>%
pull(target)
# Store the NCBI IDs in the list with pathway_id as the key
pathway_gene_map[[pathway_id]] <- pathway_ncbi_ids
}
node_score <- node_score %>%
mutate(pathway = NA_character_)
# Check if each gene belongs to any of the pathways
for (i in seq_along(node_score$ncbi_id)) {
gene_id <- as.character(node_score$ncbi_id[i])
gene_pathways <- pathways$term_id[sapply(pathway_gene_map, function(ids) gene_id %in% ids)]
if (length(gene_pathways) > 0) {
if (length(gene_pathways) > 1) {
#node_score$pathway[i] <- 'Multiple Pathway'
pathway_name=c()
for (j in gene_pathways){
pathway_name=c(pathway_name,pathways$term_name[pathways$term_id == j])
}
node_score$pathway[i] <- paste(pathway_name,collapse = '|')
} else {
node_score$pathway[i] <- pathways$term_name[pathways$term_id == gene_pathways]
}
} else{
node_score$pathway[i] <- 'Other'
}
}
}
return(list(filtered_df=filtered_df,node_score=node_score))
}
plot_net=function(t,nodes,edges,is_label_pathway,color_by,log2FC_var){
# Add edge color
nodes$ncbi_id <- as.character(nodes$ncbi_id)
edges$from <- as.character(edges$from)
edges$to <- as.character(edges$to)
if (is_label_pathway){
# Create a lookup table for pathways
pathway_lookup <- nodes %>% select(ncbi_id, pathway) %>% deframe()
# Vectorized operation to determine edge colors
edges <- edges %>%
mutate(color = ifelse(pathway_lookup[from] == 'Other' | pathway_lookup[to] == 'Other', '#ececec', 'black'))
# Reorder the levels of the pathway factor dynamically
unique_pathways <- unique(nodes$pathway)
reordered_levels <- c(setdiff(unique_pathways, c("Multiple Pathway", "Other")), "Multiple Pathway", "Other")
nodes$pathway <- factor(nodes$pathway, levels = reordered_levels)
}
# create graph
g <- graph_from_data_frame(edges, directed = FALSE,nodes)
# create layout
layout = create_layout(g, layout = 'stress')
if (color_by=='logfc'){
# plot1: colored by logFC
p=ggraph(layout) +
geom_edge_link(color='lightgrey',width=0.1) +
geom_node_point(aes(size = gene_confidence_score, color = !!sym(log2FC_var))) +
scale_size_continuous(range = c(5, 10)) +
scale_color_gradientn(colours = c('#62aec5','white',"#e64072"),
limits = c(-5,5),oob = scales::squish)+
geom_node_text(aes(label=symbol),size=3)+
theme_graph(base_family = "sans")
ggsave(paste0(plot_save_path,"network_",t,"_logFC.pdf"), plot = p, device = "pdf", width = 15, height = 15)
} else if (color_by=='pathway'){
# plot2: colored by pathway
p2=ggraph(layout) +
geom_edge_link(aes(color = I(color)), width = 0.1) +
geom_node_point(aes(size = gene_confidence_score, color = pathway)) +
scale_color_manual(values=color_vector, breaks = reordered_levels)+
scale_size_continuous(range = c(5, 10)) +
geom_node_text(aes(label=symbol),size=3)+
theme_graph(base_family = "sans")+
guides(colour = guide_legend(override.aes = list(size=5)))
ggsave(paste0(plot_save_path,"network_",t,"_pathway.pdf"), plot = p2, device = "pdf", width = 15, height = 15)
# plot3: colored by pathway, all edges grey
p3=ggraph(layout) +
geom_edge_link(color='lightgrey',width=0.1) +
geom_node_point(aes(size = gene_confidence_score, color = pathway)) +
scale_color_manual(values=color_vector, breaks = reordered_levels)+
scale_size_continuous(range = c(5, 10)) +
geom_node_text(aes(label=symbol),size=3)+
theme_graph(base_family = "sans")+
guides(colour = guide_legend(override.aes = list(size=5)))
ggsave(paste0(plot_save_path,"network_",t,"_pathway_grey.pdf"), plot = p3, device = "pdf", width = 15, height = 15)
}
}
for (t in traits) {
# ---- Prepare Node and Edge ----
dfs_list=prep_net(t,
gpsnet_result_path,
gpsnet_raw_input_path,log2FC_var,gene_var,pval_var,padj_var,
is_label_pathway)
# ---- Plot Network ----
nodes=as.data.frame(dfs_list$node_score)
edges=dfs_list$filtered_df
plot_net(t,nodes,edges,is_label_pathway,color_by,log2FC_var)
}
head(nodes)
class(nodes$gene_confidence_score)
## This code will plot a network, where nodes are GPSnet outputs and edges are from PPI.
## Node will be colored by logFC/pathway belongings
library(igraph)
library(ggraph)
library(ggrepel)
library(scales)
library(tidygraph)
library(tidyverse)
library(gprofiler2)
library(RColorBrewer)
# ---- Set File Path ----
setwd('/Users/manage/Desktop/GitHub/PD/pathway/code')
gpsnet_result_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet/GPSnet_result_keep_score_final/'
gpsnet_raw_input_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet/lesion_data/'
plot_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/pathway/net_plot/'
log2FC_var='log2FoldChange'
gene_var='...1'
pval_var='pvalue'
padj_var='padj'
traits <- c('B_cells_filtered', 'Dendritic_cells_filtered', 'Fibroblasts_filtered', 'Endothelial_cells_filtered',
'Keratinocytes_filtered', 'Plasma_cells_filtered','Proliferating_cells_filtered',
'Sweat_gland_Myoepithelial_cells_filtered','T_cells_filtered')# filenames of GPSnet output files
traits=c('Keratinocytes_filtered')
is_label_pathway=FALSE
if (is_label_pathway){
highlight_pathways <- read_csv('./highlight_pathways.csv')#highlight pathways
}
color_by='logfc'
if (!dir.exists(plot_save_path)) {
dir.create(plot_save_path, recursive = TRUE)
}
# ---- Read Reference Data ----
edges <- read_csv('../../ref/ppi.csv')
map_ref <- read_csv('../../ref/gene_vocab.csv')
map_ref$ncbi_id=as.character(map_ref$ncbi_id)
G <- graph_from_data_frame(d = edges, directed = FALSE)
# ---- Functions: prep_net, plot_net ----
prep_net=function(t,
gpsnet_result_path,
gpsnet_raw_input_path,log2FC_var,gene_var,pval_var,padj_var,
is_label_pathway){
# Read module genes
node_score <- read_csv(paste0(gpsnet_result_path, t, '.txt'), col_names = FALSE)# !! Check if file suffix is txt !!
colnames(node_score) <- c('ncbi_id', 'gene_confidence_score')
node_score$gene_confidence_score=as.numeric(node_score$gene_confidence_score)
nodes_list <- as.character(node_score$ncbi_id)  # Convert to character
# Ensure the nodes in nodes_list are present in the graph
nodes_list <- nodes_list[nodes_list %in% V(G)$name]
# Select the PPI containing module genes
H <- induced_subgraph(G, nodes_list)
# Get largest component subgraph
components <- components(H)
largest_cc <- which.max(components$csize)
giantC <- induced_subgraph(H, which(components$membership == largest_cc))
# Get the largest component subgraph edges
df <- get.data.frame(giantC, what = "edges")
df <- distinct(df)
# Get largest component subgraph nodes
nodes_list <- V(giantC)$name
# filter nodes
node_score <- node_score %>% filter(ncbi_id %in% nodes_list)
# Map gene id to gene symbol
node_score <- node_score %>%
left_join(map_ref %>% select(ncbi_id, symbol), by = 'ncbi_id')
# Append logFC and p_vals
degs <- read_csv(paste0(gpsnet_raw_input_path, t, '.csv'))# !! Check if raw filenames !!
node_score <- node_score %>%
left_join(degs %>% select({{log2FC_var}}, {{gene_var}}, {{pval_var}}, {{padj_var}}) %>%
rename(symbol = {{gene_var}}), by = 'symbol')
# Drop rows with NA values
node_score <- drop_na(node_score)
# Remove self-loop nodes
filtered_df <- df %>% filter(from != to)
common_nodes = intersect(unique(node_score$ncbi_id),unique(c(filtered_df$from,filtered_df$to)))
node_score = node_score %>% filter(ncbi_id %in% common_nodes)
filtered_df <- filtered_df %>% filter(from %in% common_nodes & to %in% common_nodes)
common_nodes <- unique(c(filtered_df$from, filtered_df$to))
# Filter node_score again to ensure it matches the nodes in filtered_df
node_score <- node_score %>% filter(ncbi_id %in% common_nodes)
if (is_label_pathway){
# for each node, find if it belongs to highlight pathways
pathways=highlight_pathways %>% filter(cell_type==t)
pathway_gene_map <- list()
for (pathway_id in pathways$term_id){
# Map the pathway ID to its associated genes
gconvert_res <- gconvert(query = pathway_id, organism = "hsapiens", target = "ENTREZGENE_ACC")
pathway_ncbi_ids <- gconvert_res %>%
select(target) %>%
pull(target)
# Store the NCBI IDs in the list with pathway_id as the key
pathway_gene_map[[pathway_id]] <- pathway_ncbi_ids
}
node_score <- node_score %>%
mutate(pathway = NA_character_)
# Check if each gene belongs to any of the pathways
for (i in seq_along(node_score$ncbi_id)) {
gene_id <- as.character(node_score$ncbi_id[i])
gene_pathways <- pathways$term_id[sapply(pathway_gene_map, function(ids) gene_id %in% ids)]
if (length(gene_pathways) > 0) {
if (length(gene_pathways) > 1) {
#node_score$pathway[i] <- 'Multiple Pathway'
pathway_name=c()
for (j in gene_pathways){
pathway_name=c(pathway_name,pathways$term_name[pathways$term_id == j])
}
node_score$pathway[i] <- paste(pathway_name,collapse = '|')
} else {
node_score$pathway[i] <- pathways$term_name[pathways$term_id == gene_pathways]
}
} else{
node_score$pathway[i] <- 'Other'
}
}
}
return(list(filtered_df=filtered_df,node_score=node_score))
}
plot_net=function(t,nodes,edges,is_label_pathway,color_by,log2FC_var){
# Add edge color
nodes$ncbi_id <- as.character(nodes$ncbi_id)
edges$from <- as.character(edges$from)
edges$to <- as.character(edges$to)
if (is_label_pathway){
# Create a lookup table for pathways
pathway_lookup <- nodes %>% select(ncbi_id, pathway) %>% deframe()
# Vectorized operation to determine edge colors
edges <- edges %>%
mutate(color = ifelse(pathway_lookup[from] == 'Other' | pathway_lookup[to] == 'Other', '#ececec', 'black'))
# Reorder the levels of the pathway factor dynamically
unique_pathways <- unique(nodes$pathway)
reordered_levels <- c(setdiff(unique_pathways, c("Multiple Pathway", "Other")), "Multiple Pathway", "Other")
nodes$pathway <- factor(nodes$pathway, levels = reordered_levels)
}
# create graph
g <- graph_from_data_frame(edges, directed = FALSE,nodes)
# create layout
layout = create_layout(g, layout = 'stress')
if (color_by=='logfc'){
# plot1: colored by logFC
p=ggraph(layout) +
geom_edge_link(color='lightgrey',width=0.1) +
geom_node_point(aes(size = gene_confidence_score, color = !!sym(log2FC_var))) +
scale_size_continuous(range = c(5, 10)) +
scale_color_gradientn(colours = c('#62aec5','white',"#e64072"),
limits = c(-5,5),oob = scales::squish)+
geom_node_text(aes(label=symbol),size=3)+
theme_graph(base_family = "sans")
ggsave(paste0(plot_save_path,"network_",t,"_logFC.pdf"), plot = p, device = "pdf", width = 15, height = 15)
} else if (color_by=='pathway'){
# plot2: colored by pathway
p2=ggraph(layout) +
geom_edge_link(aes(color = I(color)), width = 0.1) +
geom_node_point(aes(size = gene_confidence_score, color = pathway)) +
scale_color_manual(values=color_vector, breaks = reordered_levels)+
scale_size_continuous(range = c(5, 10)) +
geom_node_text(aes(label=symbol),size=3)+
theme_graph(base_family = "sans")+
guides(colour = guide_legend(override.aes = list(size=5)))
ggsave(paste0(plot_save_path,"network_",t,"_pathway.pdf"), plot = p2, device = "pdf", width = 15, height = 15)
# plot3: colored by pathway, all edges grey
p3=ggraph(layout) +
geom_edge_link(color='lightgrey',width=0.1) +
geom_node_point(aes(size = gene_confidence_score, color = pathway)) +
scale_color_manual(values=color_vector, breaks = reordered_levels)+
scale_size_continuous(range = c(5, 10)) +
geom_node_text(aes(label=symbol),size=3)+
theme_graph(base_family = "sans")+
guides(colour = guide_legend(override.aes = list(size=5)))
ggsave(paste0(plot_save_path,"network_",t,"_pathway_grey.pdf"), plot = p3, device = "pdf", width = 15, height = 15)
}
}
for (t in traits) {
# ---- Prepare Node and Edge ----
dfs_list=prep_net(t,
gpsnet_result_path,
gpsnet_raw_input_path,log2FC_var,gene_var,pval_var,padj_var,
is_label_pathway)
# ---- Plot Network ----
nodes=as.data.frame(dfs_list$node_score)
edges=dfs_list$filtered_df
plot_net(t,nodes,edges,is_label_pathway,color_by,log2FC_var)
}
dim(nodes)
setwd('/Users/manage/Desktop/Github/PD/pathway/code/')
# ---- Set Path ----
# gene module path
gpsnet_result_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet//GPSnet_result_final/'
# save path
parent_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/pathway/'
# save version and suffix
#version='DEGs_lesion_vs_normal.psudobulk.default'
version=''
# traits (name of gene module result files)
#trait_list='B_cells_filtered,Dendritic_cells_filtered,Fibroblasts_filtered,Keratinocytes_filtered,Plasma_cells_filtered,Proliferating_cells_filtered,Sweat_gland_Myoepithelial_cells_filtered,T_cells_filtered'
trait_list='Keratinocytes'
# GO
save_path=paste0(parent_save_path,version,'/GO_nogoxplore_norevigo/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_nogoxplore_norevigo_filterGO.R",gpsnet_result_path,save_path,trait_list)
system(cmd)
setwd('/Users/manage/Desktop/Github/PD/pathway/code/')
library(tibble)
# ---- Set Path ----
degP=c(0.05)
connP=c(0.01)
cutoff=c(0.002)
combine_database=c('bp','reac','bp_no','go,reac','go_no,reac')
is_smooth=c('yesSmooth')
gpsnet_result_path0='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet/GPSnet_result/'
gpsnet_result_score_path0='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet/GPSnet_result_keep_score/'
gpsnet_raw_input_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/lesion_data/'
parent_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/pathway/degP0.05_con0.01_yesSmooth/'
trait_list='Fibroblasts_filtered,Keratinocytes_filtered,T_cells_filtered,B_cells_filtered'
all_traits=strsplit(trait_list,',')[[1]]
source("~/Desktop/chang_runGPSnet_08-09-2024/python/pathway/code/run_pathway_analysis_select_v2.R")
setwd('/Users/manage/Desktop/Github/PD/pathway/code/')
library(tibble)
# ---- Set Path ----
degP=c(0.05)
connP=c(0.01)
cutoff=c(0.002)
combine_database=c('bp','reac','bp_no','go,reac','go_no,reac')
is_smooth=c('yesSmooth')
gpsnet_result_path0='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet/GPSnet_result/'
gpsnet_result_score_path0='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/GPSnet/GPSnet_result_keep_score/'
gpsnet_raw_input_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/lesion_data/'
parent_save_path='/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/pathway/degP0.05_con0.01_yesSmooth/'
trait_list='Fibroblasts_filtered,Keratinocytes_filtered,T_cells_filtered,B_cells_filtered'
all_traits=strsplit(trait_list,',')[[1]]
all_summary_list <- list()
subfolder = paste0('degP',degP,'_conn',connP,'_',is_smooth)
gpsnet_result_path=paste0(gpsnet_result_path0,subfolder,'/')
gpsnet_result_score_path=paste0(gpsnet_result_score_path0,subfolder,'/')
summary_list <- list()
gpsnet_result_suffix=paste0('_',cutoff)
version = paste0(subfolder,'_moduleCutoff',cutoff)
# ---- Run pathway enrichment on 3 databases: GO, REAC, KEGG ----
# GO
save_path=paste0(parent_save_path,version,'/GO/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
summary_list <- list()
gpsnet_result_suffix=paste0('_',cutoff)
version = paste0('moduleCutoff',cutoff)
# ---- Run pathway enrichment on 3 databases: GO, REAC, KEGG ----
# GO
save_path=paste0(parent_save_path,version,'/GO/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_goxplore_revigo_filterGO.R",gpsnet_result_path,save_path,trait_list,gpsnet_result_suffix)
system(cmd)
# save enriched number
num_enrichedGO <- sapply(all_traits, function(t) {
file_path <- paste0(save_path, t, '_enrichedGO_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
num_enrichedBP <- sapply(all_traits, function(t) {
file_path <- paste0(save_path,'BP/', t, '_enrichedBP_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
# GO - no prune
save_path=paste0(parent_save_path,version,'/GO_nogoxplore_norevigo/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_nogoxplore_norevigo_filterGO.R",gpsnet_result_path,save_path,trait_list,gpsnet_result_suffix)
system(cmd)
# save enriched number
num_enrichedGO_no <- sapply(all_traits, function(t) {
file_path <- paste0(save_path, t, '_enrichedGO_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
num_enrichedBP_no <- sapply(all_traits, function(t) {
file_path <- paste0(save_path,'BP/', t, '_enrichedBP_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
# REAC
save_path=paste0(parent_save_path,version,'/REAC/')
if (!dir.exists(save_path)) {
dir.create(save_path, recursive = TRUE)
}
cmd <- paste("Rscript gprofier_filterREAC.R",gpsnet_result_path,save_path,trait_list,gpsnet_result_suffix)
system(cmd)
# save enriched number
num_enrichedREAC <- sapply(all_traits, function(t) {
file_path <- paste0(save_path, t, '_enrichedREAC_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
summary_list[[1]] <- num_enrichedGO
summary_list[[2]] <- num_enrichedBP
summary_list[[3]] <- num_enrichedGO_no
summary_list[[4]] <- num_enrichedBP_no
summary_list[[5]] <- num_enrichedREAC
for (combine_database in combine_database_v){
#---- Combine output files into one file ----
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
if (!dir.exists(combined_save_path)) {
dir.create(combined_save_path, recursive = TRUE)
}
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list,combine_database)
system(cmd)
# save enriched number
num_enriched_combo <- sapply(all_traits, function(t) {
file_path <- paste0(combined_save_path, t, '_enrichedPathway_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
#summary=rbind(summary,as.numeric(num_enriched_combo))
summary_list[[length(summary_list) + 1]] <- as.numeric(num_enriched_combo)
# ---- Plot Bubble Plot ----
top_num=100
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T',top_num,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,top_num,20,12)#h,w
system(cmd)
top_num=50
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T',top_num,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,top_num,20,12)#h,w
system(cmd)
# ---- Plot Network ----
net_save_path=paste0(parent_save_path,version,'/net_',combine_database,'/')
if (!dir.exists(net_save_path)) {
dir.create(net_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_net.R",gpsnet_result_score_path,gpsnet_raw_input_path,net_save_path,trait_list,gpsnet_result_suffix)
system(cmd)
}
combine_database_v=c('bp','reac','bp_no','go,reac','go_no,reac')
for (combine_database in combine_database_v){
#---- Combine output files into one file ----
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
if (!dir.exists(combined_save_path)) {
dir.create(combined_save_path, recursive = TRUE)
}
cmd <- paste("Rscript combine_filtered.R",combined_save_path,trait_list,combine_database)
system(cmd)
# save enriched number
num_enriched_combo <- sapply(all_traits, function(t) {
file_path <- paste0(combined_save_path, t, '_enrichedPathway_filtered.tsv')
num <- as.numeric(sub("^\\s*([0-9]+).*$", "\\1",system(paste("wc -l", file_path), intern = TRUE)))
num - 1
})
#summary=rbind(summary,as.numeric(num_enriched_combo))
summary_list[[length(summary_list) + 1]] <- as.numeric(num_enriched_combo)
# ---- Plot Bubble Plot ----
top_num=100
combined_save_path=paste0(parent_save_path,version,'/combined_',combine_database,'/')
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T',top_num,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,top_num,20,12)#h,w
system(cmd)
top_num=50
bubble_save_path=paste0(parent_save_path,version,'/bubble_',combine_database,'/T',top_num,'/')
if (!dir.exists(bubble_save_path)) {
dir.create(bubble_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_bubble.R",combined_save_path,bubble_save_path,trait_list,top_num,20,12)#h,w
system(cmd)
# ---- Plot Network ----
net_save_path=paste0(parent_save_path,version,'/net_',combine_database,'/')
if (!dir.exists(net_save_path)) {
dir.create(net_save_path, recursive = TRUE)
}
cmd <- paste("Rscript plot_net.R",gpsnet_result_score_path,gpsnet_raw_input_path,net_save_path,trait_list,gpsnet_result_suffix)
system(cmd)
}
summary_df <- as.data.frame(t(do.call(rbind, summary_list)))
colnames(summary_df) <- c('GO','BP','GO_no','BP_no','REAC',combine_database_v)
summary_df$degP <- degP
summary_df$connP <- connP
summary_df$moduleCut <- cutoff
summary_df <- rownames_to_column(summary_df, var = "cellType")
all_summary_list[[length(all_summary_list) + 1]] <- summary_df
all_summary_df <- do.call(rbind, all_summary_list)
write.csv(all_summary_df,'/Users/manage/Desktop/chang_runGPSnet_08-09-2024/python/pathway/summary_degP0.05_con0.01_yesSmooth.csv')
